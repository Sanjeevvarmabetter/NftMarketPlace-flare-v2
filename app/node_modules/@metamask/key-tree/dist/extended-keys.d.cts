import type { Network } from "./constants.cjs";
/**
 * An extended public or private key. Contains either a public or private key,
 * depending on the version.
 */
type ExtendedKeyLike = {
    depth: number;
    parentFingerprint: number;
    index: number;
    network: Network;
    chainCode: Uint8Array;
};
type ExtendedPublicKey = ExtendedKeyLike & {
    type: 'public';
    publicKey: Uint8Array;
};
type ExtendedPrivateKey = ExtendedKeyLike & {
    type: 'private';
    privateKey: Uint8Array;
};
export type ExtendedKey = ExtendedPublicKey | ExtendedPrivateKey;
/**
 * Decode an extended public or private key. In the case of an extended public
 * key, the public key is returned in the uncompressed form.
 *
 * Throws an error if the extended key is invalid.
 *
 * @param extendedKey - The extended key string to attempt to decode.
 * @returns The decoded extended key.
 */
export declare const decodeExtendedKey: (extendedKey: string) => ExtendedKey;
/**
 * Encodes an extended public or private key. Assumes that all the inputs are verified beforehand.
 *
 * @param extendedKey - The extended key data to encode.
 * @returns The encoded extended key.
 */
export declare const encodeExtendedKey: (extendedKey: ExtendedKey) => string;
export {};
//# sourceMappingURL=extended-keys.d.cts.map