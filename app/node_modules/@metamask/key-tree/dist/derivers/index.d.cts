import * as bip32 from "./bip32.cjs";
import * as bip39 from "./bip39.cjs";
import * as cip3 from "./cip3.cjs";
import * as slip10 from "./slip10.cjs";
import type { Network } from "../constants.cjs";
import type { CryptographicFunctions } from "../cryptography.cjs";
import type { Curve } from "../curves/index.cjs";
import type { SLIP10Node } from "../SLIP10Node.cjs";
export type DerivedKeys = {
    /**
     * The derived private key, can be undefined if public key derivation was used.
     */
    privateKey?: Uint8Array;
    publicKey: Uint8Array;
    chainCode: Uint8Array;
};
export type DeriveChildKeyArgs = {
    path: Uint8Array | string;
    curve: Curve;
    node?: SLIP10Node;
    network?: Network | undefined;
};
export type Deriver = {
    deriveChildKey: (args: DeriveChildKeyArgs, cryptographicFunctions?: CryptographicFunctions) => Promise<SLIP10Node>;
};
export declare const derivers: {
    bip32: typeof bip32;
    bip39: typeof bip39;
    slip10: typeof slip10;
    cip3: typeof cip3;
};
export { createBip39KeyFromSeed, mnemonicToSeed } from "./bip39.cjs";
//# sourceMappingURL=index.d.cts.map