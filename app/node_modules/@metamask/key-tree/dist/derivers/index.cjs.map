{"version":3,"file":"index.cjs","sourceRoot":"","sources":["../../src/derivers/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mDAAiC;AACjC,mDAAiC;AACjC,iDAA+B;AAC/B,qDAAmC;AA6BtB,QAAA,QAAQ,GAAG;IACtB,KAAK;IACL,KAAK;IACL,MAAM;IACN,IAAI;CACL,CAAC;AAEF,qCAAiE;AAAxD,+GAAA,sBAAsB,OAAA;AAAE,uGAAA,cAAc,OAAA","sourcesContent":["import * as bip32 from './bip32';\nimport * as bip39 from './bip39';\nimport * as cip3 from './cip3';\nimport * as slip10 from './slip10';\nimport type { Network } from '../constants';\nimport type { CryptographicFunctions } from '../cryptography';\nimport type { Curve } from '../curves';\nimport type { SLIP10Node } from '../SLIP10Node';\n\nexport type DerivedKeys = {\n  /**\n   * The derived private key, can be undefined if public key derivation was used.\n   */\n  privateKey?: Uint8Array;\n  publicKey: Uint8Array;\n  chainCode: Uint8Array;\n};\n\nexport type DeriveChildKeyArgs = {\n  path: Uint8Array | string;\n  curve: Curve;\n  node?: SLIP10Node;\n  network?: Network | undefined;\n};\n\nexport type Deriver = {\n  deriveChildKey: (\n    args: DeriveChildKeyArgs,\n    cryptographicFunctions?: CryptographicFunctions,\n  ) => Promise<SLIP10Node>;\n};\n\nexport const derivers = {\n  bip32,\n  bip39,\n  slip10,\n  cip3,\n};\n\nexport { createBip39KeyFromSeed, mnemonicToSeed } from './bip39';\n"]}