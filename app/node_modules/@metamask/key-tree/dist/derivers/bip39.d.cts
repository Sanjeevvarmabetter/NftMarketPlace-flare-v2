import type { DeriveChildKeyArgs } from "./index.cjs";
import type { BIP39Node, BIP39StringNode, Network, RootedSLIP10PathTuple, RootedSLIP10SeedPathTuple } from "../constants.cjs";
import type { CryptographicFunctions } from "../cryptography.cjs";
import type { Curve, SupportedCurve } from "../curves/index.cjs";
import { SLIP10Node } from "../SLIP10Node.cjs";
/**
 * Convert a BIP-39 mnemonic phrase to a seed.
 *
 * @param mnemonic - The BIP-39 mnemonic phrase to convert. If the mnemonic is a
 * `Uint8Array`, it is assumed to contain the indices of the words in the
 * English wordlist.
 * @param passphrase - The passphrase to use.
 * @param cryptographicFunctions - The cryptographic functions to use. If
 * provided, these will be used instead of the built-in implementations.
 * @returns The seed.
 */
export declare function mnemonicToSeed(mnemonic: string | Uint8Array, passphrase?: string, cryptographicFunctions?: CryptographicFunctions): Promise<Uint8Array>;
/**
 * Convert a BIP-39 mnemonic phrase to a multi path.
 *
 * @param mnemonic - The BIP-39 mnemonic phrase to convert.
 * @returns The multi path.
 */
export declare function bip39MnemonicToMultipath(mnemonic: string): BIP39StringNode;
/**
 * Convert a multi path to a BIP-39 mnemonic phrase.
 *
 * @param value - The multi path to convert.
 * @returns The BIP-39 mnemonic phrase.
 */
export declare function multipathToBip39Mnemonic(value: BIP39Node): string | Uint8Array;
export type GetDerivationPathWithSeedOptions = {
    path: RootedSLIP10PathTuple;
    curve: SupportedCurve;
};
/**
 * Get a {@link RootedSLIP10SeedPathTuple} from a {@link RootedSLIP10PathTuple}.
 *
 * @param options - The options for getting the derivation path.
 * @param options.path - The derivation path to convert.
 * @param options.curve - The curve to use for derivation.
 * @param cryptographicFunctions - The cryptographic functions to use. If
 * provided, these will be used instead of the built-in implementations.
 * @returns The derivation path with the seed, or entropy in the case of CIP-3.
 */
export declare function getDerivationPathWithSeed({ path, curve: curveName }: GetDerivationPathWithSeedOptions, cryptographicFunctions?: CryptographicFunctions): Promise<RootedSLIP10SeedPathTuple>;
/**
 * Create a {@link SLIP10Node} from a BIP-39 seed.
 *
 * @param options - The options for creating the node.
 * @param options.path - The multi path. This is expected to be the BIP-39 seed,
 * or the entropy in the case of CIP-3, not the mnemonic phrase itself.
 * @param options.curve - The curve to use for derivation.
 * @param options.network - The network for the node. This is only used for
 * extended keys, and defaults to `mainnet`.
 * @param cryptographicFunctions - The cryptographic functions to use. If
 * provided, these will be used instead of the built-in implementations.
 * @returns The node.
 */
export declare function deriveChildKey({ path, curve, network }: DeriveChildKeyArgs, cryptographicFunctions?: CryptographicFunctions): Promise<SLIP10Node>;
/**
 * Create a {@link SLIP10Node} from a BIP-39 seed.
 *
 * @param seed - The cryptographic seed bytes.
 * @param curve - The curve to use.
 * @param network - The network for the node. This is only used for extended
 * keys, and defaults to `mainnet`.
 * @param cryptographicFunctions - The cryptographic functions to use. If
 * provided, these will be used instead of the built-in implementations.
 * @returns An object containing the corresponding BIP-39 master key and chain
 * code.
 */
export declare function createBip39KeyFromSeed(seed: Uint8Array, curve: Extract<Curve, {
    masterNodeGenerationSpec: 'slip10';
}>, network?: Network | undefined, cryptographicFunctions?: CryptographicFunctions): Promise<SLIP10Node>;
/**
 * Create a {@link SLIP10Node} from BIP-39 entropy.
 * This function is consistent with the Icarus derivation scheme.
 * Icarus root key derivation scheme: https://github.com/cardano-foundation/CIPs/blob/09d7d8ee1bd64f7e6b20b5a6cae088039dce00cb/CIP-0003/Icarus.md.
 * CIP3: https://github.com/cardano-foundation/CIPs/blob/09d7d8ee1bd64f7e6b20b5a6cae088039dce00cb/CIP-0003/CIP-0003.md#master-key-generation.
 *
 * @param entropy - The entropy value.
 * @param curve - The curve to use.
 * @param network - The network for the node. This is only used for extended
 * keys, and defaults to `mainnet`.
 * @param cryptographicFunctions - The cryptographic functions to use. If
 * provided, these will be used instead of the built-in implementations.
 * @returns The root key pair consisting of 64-byte private key and 32-byte chain code.
 */
export declare function entropyToCip3MasterNode(entropy: Uint8Array, curve: Extract<Curve, {
    masterNodeGenerationSpec: 'cip3';
}>, network?: Network | undefined, cryptographicFunctions?: CryptographicFunctions): Promise<SLIP10Node>;
//# sourceMappingURL=bip39.d.cts.map