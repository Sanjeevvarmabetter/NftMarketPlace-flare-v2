{"version":3,"file":"SLIP10Node.mjs","sourceRoot":"","sources":["../src/SLIP10Node.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert, bytesToHex } from '@metamask/utils';\n\nimport type { BIP44CoinTypeNode } from './BIP44CoinTypeNode';\nimport type { BIP44Node } from './BIP44Node';\nimport { BYTES_KEY_LENGTH } from './constants';\nimport type {\n  Network,\n  RootedSLIP10PathTuple,\n  SLIP10PathTuple,\n} from './constants';\nimport type { CryptographicFunctions } from './cryptography';\nimport type { SupportedCurve } from './curves';\nimport { getCurveByName } from './curves';\nimport { deriveKeyFromPath } from './derivation';\nimport { publicKeyToEthAddress } from './derivers/bip32';\nimport { getDerivationPathWithSeed } from './derivers/bip39';\nimport { decodeExtendedKey, encodeExtendedKey } from './extended-keys';\nimport { PUBLIC_KEY_GUARD } from './guard';\nimport {\n  getBytes,\n  getBytesUnsafe,\n  getFingerprint,\n  isValidInteger,\n  validateBIP32Index,\n  validateCurve,\n  validateNetwork,\n} from './utils';\n\n/**\n * A wrapper for SLIP-10 Hierarchical Deterministic (HD) tree nodes, i.e.\n * cryptographic keys used to generate key pairs and addresses for cryptocurrency\n * protocols.\n */\nexport type JsonSLIP10Node = {\n  /**\n   * The 0-indexed path depth of this node.\n   */\n  readonly depth: number;\n\n  /**\n   * The fingerprint of the master node, i.e., the node at depth 0. May be\n   * undefined if this node was created from an extended key.\n   */\n  readonly masterFingerprint?: number | undefined;\n\n  /**\n   * The fingerprint of the parent key, or 0 if this is a master node.\n   */\n  readonly parentFingerprint: number;\n\n  /**\n   * The index of the node, or 0 if this is a master node.\n   */\n  readonly index: number;\n\n  /**\n   * The network for the node. This is only used for extended keys, and defaults\n   * to `mainnet`.\n   */\n  readonly network?: Network | undefined;\n\n  /**\n   * The (optional) private key of this node.\n   */\n  readonly privateKey?: string | undefined;\n\n  /**\n   * The public key of this node.\n   */\n  readonly publicKey: string;\n\n  /**\n   * The chain code of this node.\n   */\n  readonly chainCode: string;\n\n  /**\n   * The name of the curve used by the node.\n   */\n  readonly curve: SupportedCurve;\n};\n\nexport type SLIP10NodeInterface = JsonSLIP10Node & {\n  chainCodeBytes: Uint8Array;\n\n  /**\n   * The private key for this node, as a {@link Uint8Array}.\n   * May be undefined if this node is a public key only node.\n   */\n  privateKeyBytes?: Uint8Array | undefined;\n\n  /**\n   * The public key for this node, as a {@link Uint8Array}.\n   */\n  publicKeyBytes: Uint8Array;\n\n  /**\n   * @returns A JSON-compatible representation of this node's data fields.\n   */\n  toJSON(): JsonSLIP10Node;\n};\n\ntype BaseSLIP10NodeConstructorOptions = {\n  readonly depth: number;\n  readonly masterFingerprint?: number | undefined;\n  readonly parentFingerprint: number;\n  readonly index: number;\n  readonly network?: Network | undefined;\n  readonly chainCode: Uint8Array;\n  readonly curve: SupportedCurve;\n};\n\ntype SLIP10NodePrivateKeyConstructorOptions =\n  BaseSLIP10NodeConstructorOptions & {\n    readonly privateKey: Uint8Array;\n    readonly publicKey?: Uint8Array | undefined;\n  };\n\ntype SLIP10NodePublicKeyConstructorOptions =\n  BaseSLIP10NodeConstructorOptions & {\n    readonly privateKey?: Uint8Array | undefined;\n    readonly publicKey: Uint8Array;\n  };\n\nexport type SLIP10NodeConstructorOptions =\n  | SLIP10NodePrivateKeyConstructorOptions\n  | SLIP10NodePublicKeyConstructorOptions;\n\nexport type SLIP10ExtendedKeyOptions = {\n  readonly depth: number;\n  readonly masterFingerprint?: number | undefined;\n  readonly parentFingerprint: number;\n  readonly index: number;\n  readonly network?: Network | undefined;\n  readonly chainCode: string | Uint8Array;\n  readonly privateKey?: string | Uint8Array | undefined;\n  readonly publicKey?: string | Uint8Array | undefined;\n  readonly curve: SupportedCurve;\n\n  /**\n   * For internal use only. This is used to ensure the public key provided to\n   * the constructor is trusted.\n   */\n  readonly guard?: typeof PUBLIC_KEY_GUARD;\n};\n\nexport type SLIP10DerivationPathOptions = {\n  readonly derivationPath: RootedSLIP10PathTuple;\n  readonly network?: Network | undefined;\n  readonly curve: SupportedCurve;\n};\n\nexport class SLIP10Node implements SLIP10NodeInterface {\n  /**\n   * Wrapper of the {@link fromExtendedKey} function. Refer to that function\n   * for documentation.\n   *\n   * @param json - The JSON representation of a SLIP-10 node.\n   * @param cryptographicFunctions - The cryptographic functions to use. If\n   * provided, these will be used instead of the built-in implementations.\n   * @returns A SLIP10 node.\n   */\n  static async fromJSON(\n    json: JsonSLIP10Node,\n    cryptographicFunctions?: CryptographicFunctions,\n  ): Promise<SLIP10Node> {\n    return SLIP10Node.fromExtendedKey(json, cryptographicFunctions);\n  }\n\n  /**\n   * Create a new SLIP-10 node from a BIP-32 serialised extended key string.\n   * The key may be either public or private. Note that `secp256k1` is assumed\n   * as the curve for the key.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * @param extendedKey - The BIP-32 extended key string.\n   * @param cryptographicFunctions - The cryptographic functions to use. If\n   * provided, these will be used instead of the built-in implementations.\n   * @returns A SLIP10 node.\n   */\n  static async fromExtendedKey(\n    extendedKey: string,\n    cryptographicFunctions?: CryptographicFunctions,\n  ): Promise<SLIP10Node>;\n\n  /**\n   * Create a new SLIP-10 node from a key and chain code. You must specify\n   * either a private key or a public key. When specifying a private key,\n   * the public key will be derived from the private key.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * @param options - The options for the new node.\n   * @param options.depth - The depth of the node.\n   * @param options.masterFingerprint - The fingerprint of the master node, i.e., the\n   * node at depth 0. May be undefined if this node was created from an extended\n   * key.\n   * @param options.parentFingerprint - The fingerprint of the parent key, or 0 if\n   * the node is a master node.\n   * @param options.index - The index of the node, or 0 if the node is a master node.\n   * @param options.privateKey - The private key for the node.\n   * @param options.publicKey - The public key for the node. If a private key is\n   * specified, this parameter is ignored.\n   * @param options.chainCode - The chain code for the node.\n   * @param options.curve - The curve used by the node.\n   * @param cryptographicFunctions - The cryptographic functions to use. If\n   * provided, these will be used instead of the built-in implementations.\n   * @returns A SLIP10 node.\n   */\n  static async fromExtendedKey(\n    // These signatures could technically be combined, but it's easier to\n    // document them separately.\n    // eslint-disable-next-line @typescript-eslint/unified-signatures\n    options: SLIP10ExtendedKeyOptions,\n    cryptographicFunctions?: CryptographicFunctions,\n  ): Promise<SLIP10Node>;\n\n  /**\n   * Create a new SLIP-10 node from a key and chain code. You must specify\n   * either a private key or a public key. When specifying a private key,\n   * the public key will be derived from the private key.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * @param options - The options for the new node. This can be an object\n   * containing the extended key options, or a string containing the extended\n   * key.\n   * @param options.depth - The depth of the node.\n   * @param options.masterFingerprint - The fingerprint of the master node, i.e., the\n   * node at depth 0. May be undefined if this node was created from an extended\n   * key.\n   * @param options.parentFingerprint - The fingerprint of the parent key, or 0 if\n   * the node is a master node.\n   * @param options.index - The index of the node, or 0 if the node is a master node.\n   * @param options.privateKey - The private key for the node.\n   * @param options.publicKey - The public key for the node. If a private key is\n   * specified, this parameter is ignored.\n   * @param options.chainCode - The chain code for the node.\n   * @param options.curve - The curve used by the node.\n   * @param cryptographicFunctions - The cryptographic functions to use. If\n   * provided, these will be used instead of the built-in implementations.\n   * @returns A SLIP10 node.\n   */\n  static async fromExtendedKey(\n    options: SLIP10ExtendedKeyOptions | string,\n    cryptographicFunctions?: CryptographicFunctions,\n  ): Promise<SLIP10Node> {\n    if (typeof options === 'string') {\n      const extendedKey = decodeExtendedKey(options);\n\n      const { chainCode, depth, parentFingerprint, index } = extendedKey;\n\n      if (extendedKey.type === 'private') {\n        const { privateKey } = extendedKey;\n\n        return SLIP10Node.fromExtendedKey(\n          {\n            depth,\n            parentFingerprint,\n            index,\n            privateKey,\n            chainCode,\n            // BIP-32 key serialisation assumes `secp256k1`.\n            curve: 'secp256k1',\n          },\n          cryptographicFunctions,\n        );\n      }\n\n      const { publicKey } = extendedKey;\n\n      return SLIP10Node.fromExtendedKey(\n        {\n          depth,\n          parentFingerprint,\n          index,\n          publicKey,\n          chainCode,\n          // BIP-32 key serialisation assumes `secp256k1`.\n          curve: 'secp256k1',\n        },\n        cryptographicFunctions,\n      );\n    }\n\n    const {\n      depth,\n      masterFingerprint,\n      parentFingerprint,\n      index,\n      network,\n      privateKey,\n      publicKey,\n      chainCode,\n      curve,\n      guard,\n    } = options;\n\n    const chainCodeBytes = getBytes(chainCode, BYTES_KEY_LENGTH);\n\n    validateCurve(curve);\n    validateBIP32Depth(depth);\n    validateBIP32Index(index);\n    validateRootIndex(index, depth);\n    validateNetwork(network);\n    validateParentFingerprint(parentFingerprint, depth);\n    validateMasterParentFingerprint(\n      masterFingerprint,\n      parentFingerprint,\n      depth,\n    );\n\n    const curveObject = getCurveByName(curve);\n\n    if (privateKey) {\n      const privateKeyBytes = getBytesUnsafe(\n        privateKey,\n        curveObject.privateKeyLength,\n      );\n\n      assert(\n        curveObject.isValidPrivateKey(privateKeyBytes),\n        `Invalid private key: Value is not a valid ${curve} private key.`,\n      );\n\n      const trustedPublicKey =\n        guard === PUBLIC_KEY_GUARD && publicKey\n          ? // `publicKey` is typed as `string | Uint8Array`, but we know it's\n            // a `Uint8Array` because of the guard. We use `getBytes` to ensure\n            // the type is correct.\n            getBytes(publicKey, curveObject.publicKeyLength)\n          : undefined;\n\n      return new SLIP10Node(\n        {\n          depth,\n          masterFingerprint,\n          parentFingerprint,\n          index,\n          network,\n          chainCode: chainCodeBytes,\n          privateKey: privateKeyBytes,\n          publicKey: trustedPublicKey,\n          curve,\n        },\n        cryptographicFunctions,\n        this.#constructorGuard,\n      );\n    }\n\n    if (publicKey) {\n      const publicKeyBytes = getBytes(publicKey, curveObject.publicKeyLength);\n\n      return new SLIP10Node(\n        {\n          depth,\n          masterFingerprint,\n          parentFingerprint,\n          index,\n          network,\n          chainCode: chainCodeBytes,\n          publicKey: publicKeyBytes,\n          curve,\n        },\n        cryptographicFunctions,\n        this.#constructorGuard,\n      );\n    }\n\n    throw new Error(\n      'Invalid options: Must provide either a private key or a public key.',\n    );\n  }\n\n  /**\n   * Create a new SLIP-10 node from a derivation path. The derivation path\n   * must be rooted, i.e. it must begin with a BIP-39 node, given as a string of\n   * the form `bip39:MNEMONIC`, where `MNEMONIC` is a space-separated list of\n   * BIP-39 seed phrase words.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param options - The options for the new node.\n   * @param options.derivationPath - The rooted HD tree path that will be used\n   * to derive the key of this node.\n   * @param options.curve - The curve used by the node.\n   * @param options.network - The network for the node. This is only used for\n   * extended keys, and defaults to `mainnet`.\n   * @param cryptographicFunctions - The cryptographic functions to use. If\n   * provided, these will be used instead of the built-in implementations.\n   * @returns A new SLIP-10 node.\n   */\n  static async fromDerivationPath(\n    { derivationPath, network, curve }: SLIP10DerivationPathOptions,\n    cryptographicFunctions?: CryptographicFunctions,\n  ): Promise<SLIP10Node> {\n    validateCurve(curve);\n\n    if (!derivationPath) {\n      throw new Error('Invalid options: Must provide a derivation path.');\n    }\n\n    if (derivationPath.length === 0) {\n      throw new Error(\n        'Invalid derivation path: May not specify an empty derivation path.',\n      );\n    }\n\n    // `deriveKeyFromPath` expects a seed derivation path, so we need to\n    // convert the rooted path to a seed path.\n    const seedDerivationPath = await getDerivationPathWithSeed(\n      {\n        path: derivationPath,\n        curve,\n      },\n      cryptographicFunctions,\n    );\n\n    return await deriveKeyFromPath(\n      {\n        path: seedDerivationPath,\n        depth: derivationPath.length - 1,\n        network,\n        curve,\n      },\n      cryptographicFunctions,\n    );\n  }\n\n  /**\n   * Create a new SLIP-10 node from a BIP-39 seed. The derivation path\n   * must be rooted, i.e. it must begin with a BIP-39 node, given as a\n   * `Uint8Array` of the seed bytes.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * @param options - The options for the new node.\n   * @param options.derivationPath - The rooted HD tree path that will be used\n   * to derive the key of this node.\n   * @param options.curve - The curve used by the node.\n   * @param options.network - The network for the node. This is only used for\n   * extended keys, and defaults to `mainnet`.\n   * @param cryptographicFunctions - The cryptographic functions to use. If\n   * provided, these will be used instead of the built-in implementations.\n   * @returns A new SLIP-10 node.\n   */\n  static async fromSeed(\n    { derivationPath, network, curve }: SLIP10DerivationPathOptions,\n    cryptographicFunctions?: CryptographicFunctions,\n  ): Promise<SLIP10Node> {\n    validateCurve(curve);\n\n    if (curve === 'ed25519Bip32') {\n      throw new Error(\n        'Invalid curve: The curve \"ed25519Bip32\" is not supported by the `fromSeed` function.',\n      );\n    }\n\n    if (!derivationPath) {\n      throw new Error('Invalid options: Must provide a derivation path.');\n    }\n\n    if (derivationPath.length === 0) {\n      throw new Error(\n        'Invalid derivation path: May not specify an empty derivation path.',\n      );\n    }\n\n    return await deriveKeyFromPath(\n      {\n        path: derivationPath,\n        depth: derivationPath.length - 1,\n        network,\n        curve,\n      },\n      cryptographicFunctions,\n    );\n  }\n\n  static readonly #constructorGuard = Symbol('SLIP10Node.constructor');\n\n  public readonly curve: SupportedCurve;\n\n  public readonly depth: number;\n\n  public readonly masterFingerprint?: number | undefined;\n\n  public readonly parentFingerprint: number;\n\n  public readonly index: number;\n\n  public readonly network: Network;\n\n  public readonly chainCodeBytes: Uint8Array;\n\n  public readonly privateKeyBytes?: Uint8Array | undefined;\n\n  #publicKeyBytes: Uint8Array | undefined;\n\n  readonly #cryptographicFunctions: CryptographicFunctions;\n\n  // eslint-disable-next-line no-restricted-syntax\n  private constructor(\n    {\n      depth,\n      masterFingerprint,\n      parentFingerprint,\n      index,\n      network = 'mainnet',\n      chainCode,\n      privateKey,\n      publicKey,\n      curve,\n    }: SLIP10NodeConstructorOptions,\n    cryptographicFunctions: CryptographicFunctions = {},\n    constructorGuard?: symbol,\n  ) {\n    assert(\n      constructorGuard === SLIP10Node.#constructorGuard,\n      'SLIP10Node can only be constructed using `SLIP10Node.fromJSON`, `SLIP10Node.fromExtendedKey`, `SLIP10Node.fromDerivationPath`, or `SLIP10Node.fromSeed`.',\n    );\n\n    assert(\n      privateKey !== undefined || publicKey !== undefined,\n      'SLIP10Node requires either a private key or a public key to be set.',\n    );\n\n    this.depth = depth;\n    this.masterFingerprint = masterFingerprint;\n    this.parentFingerprint = parentFingerprint;\n    this.index = index;\n    this.network = network;\n    this.chainCodeBytes = chainCode;\n    this.privateKeyBytes = privateKey;\n    this.curve = curve;\n    this.#publicKeyBytes = publicKey;\n    this.#cryptographicFunctions = cryptographicFunctions;\n\n    Object.freeze(this);\n  }\n\n  public get chainCode(): string {\n    return bytesToHex(this.chainCodeBytes);\n  }\n\n  public get privateKey(): string | undefined {\n    if (this.privateKeyBytes) {\n      return bytesToHex(this.privateKeyBytes);\n    }\n\n    return undefined;\n  }\n\n  public get publicKey(): string {\n    return bytesToHex(this.publicKeyBytes);\n  }\n\n  /**\n   * Get the public key bytes. This will lazily derive the public key from the\n   * private key if it is not already set.\n   *\n   * @returns The public key bytes.\n   */\n  public get publicKeyBytes(): Uint8Array {\n    if (this.#publicKeyBytes !== undefined) {\n      return this.#publicKeyBytes;\n    }\n\n    // This assertion is mainly for type safety, as `SLIP10Node` requires either\n    // a private key or a public key to always be set.\n    assert(\n      this.privateKeyBytes,\n      'Either a private key or public key is required.',\n    );\n\n    this.#publicKeyBytes = getCurveByName(this.curve).getPublicKey(\n      this.privateKeyBytes,\n    );\n\n    return this.#publicKeyBytes;\n  }\n\n  public get compressedPublicKeyBytes(): Uint8Array {\n    return getCurveByName(this.curve).compressPublicKey(this.publicKeyBytes);\n  }\n\n  public get compressedPublicKey(): string {\n    return bytesToHex(this.compressedPublicKeyBytes);\n  }\n\n  public get address(): string {\n    if (this.curve !== 'secp256k1') {\n      throw new Error(\n        'Unable to get address for this node: Only secp256k1 is supported.',\n      );\n    }\n\n    return bytesToHex(publicKeyToEthAddress(this.publicKeyBytes));\n  }\n\n  public get fingerprint(): number {\n    return getFingerprint(\n      this.compressedPublicKeyBytes,\n      getCurveByName(this.curve).compressedPublicKeyLength,\n    );\n  }\n\n  /**\n   * Get the extended public or private key for the SLIP-10 node. SLIP-10\n   * doesn't specify a format for extended keys, so we use the BIP-32 format.\n   *\n   * This property is only supported for `secp256k1` nodes, as other curves\n   * don't specify a standard format for extended keys.\n   *\n   * @returns The extended public or private key for the node.\n   */\n  public get extendedKey(): string {\n    assert(\n      this.curve === 'secp256k1',\n      'Unable to get extended key for this node: Only secp256k1 is supported.',\n    );\n\n    const data = {\n      depth: this.depth,\n      parentFingerprint: this.parentFingerprint,\n      index: this.index,\n      network: this.network,\n      chainCode: this.chainCodeBytes,\n    };\n\n    if (this.privateKeyBytes) {\n      return encodeExtendedKey({\n        ...data,\n        type: 'private',\n        privateKey: this.privateKeyBytes,\n      });\n    }\n\n    return encodeExtendedKey({\n      ...data,\n      type: 'public',\n      publicKey: this.publicKeyBytes,\n    });\n  }\n\n  /**\n   * Get a neutered version of this node, i.e. a node without a private key.\n   *\n   * @returns A neutered version of this node.\n   */\n  public neuter(): SLIP10Node {\n    return new SLIP10Node(\n      {\n        depth: this.depth,\n        masterFingerprint: this.masterFingerprint,\n        parentFingerprint: this.parentFingerprint,\n        index: this.index,\n        chainCode: this.chainCodeBytes,\n        publicKey: this.publicKeyBytes,\n        curve: this.curve,\n        network: this.network,\n      },\n      this.#cryptographicFunctions,\n      SLIP10Node.#constructorGuard,\n    );\n  }\n\n  /**\n   * Derives a child of the key contains be this node and returns a new\n   * {@link SLIP10Node} containing the child key.\n   *\n   * The specified path must be a valid HD path from this node, per SLIP-10.\n   *\n   * @param path - The partial (non-rooted) SLIP-10 HD tree path will be used\n   * to derive a child key from the parent key contained within this node.\n   * @returns The {@link SLIP10Node} corresponding to the derived child key.\n   */\n  public async derive(path: SLIP10PathTuple): Promise<SLIP10Node> {\n    return await deriveChildNode(\n      {\n        path,\n        node: this,\n      },\n      this.#cryptographicFunctions,\n    );\n  }\n\n  // This is documented in the interface of this class.\n  public toJSON(): JsonSLIP10Node {\n    return {\n      depth: this.depth,\n      masterFingerprint: this.masterFingerprint,\n      parentFingerprint: this.parentFingerprint,\n      index: this.index,\n      network: this.network,\n      curve: this.curve,\n      privateKey: this.privateKey,\n      publicKey: this.publicKey,\n      chainCode: this.chainCode,\n    };\n  }\n}\n\n/**\n * Validates a BIP-32 path depth. Effectively, asserts that the depth is an\n * integer `number`. Throws an error if validation fails.\n *\n * @param depth - The depth to validate.\n */\nexport function validateBIP32Depth(depth: unknown): asserts depth is number {\n  if (!isValidInteger(depth)) {\n    throw new Error(\n      `Invalid HD tree path depth: The depth must be a positive integer. Received: \"${String(\n        depth,\n      )}\".`,\n    );\n  }\n}\n\n/**\n * Validates a BIP-32 parent fingerprint. Effectively, asserts that the fingerprint is an\n * integer `number`. Throws an error if validation fails.\n *\n * @param parentFingerprint - The parent fingerprint to validate.\n * @param depth - The depth of the node to validate.\n * @throws If the parent fingerprint is not a positive integer, or invalid for\n * the current depth.\n */\nexport function validateParentFingerprint(\n  parentFingerprint: unknown,\n  depth: number,\n): asserts parentFingerprint is number {\n  if (!isValidInteger(parentFingerprint)) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint must be a positive integer. Received: \"${String(\n        parentFingerprint,\n      )}\".`,\n    );\n  }\n\n  if (depth === 0 && parentFingerprint !== 0) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint of the root node must be 0. Received: \"${String(\n        parentFingerprint,\n      )}\".`,\n    );\n  }\n\n  if (depth > 0 && parentFingerprint === 0) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint of a child node must not be 0. Received: \"${String(\n        parentFingerprint,\n      )}\".`,\n    );\n  }\n}\n\n/**\n * Validate that a given combination of master fingerprint and parent\n * fingerprint is valid for the given depth.\n *\n * @param masterFingerprint - The master fingerprint to validate.\n * @param parentFingerprint - The parent fingerprint to validate.\n * @param depth - The depth of the node to validate.\n * @throws If the combination of master fingerprint and parent fingerprint is\n * invalid for the given depth.\n */\nexport function validateMasterParentFingerprint(\n  masterFingerprint: number | undefined,\n  parentFingerprint: number,\n  depth: number,\n): void {\n  // The master fingerprint is optional.\n  if (!masterFingerprint) {\n    return;\n  }\n\n  if (depth >= 2 && masterFingerprint === parentFingerprint) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint of a child node cannot be equal to the master fingerprint. Received: \"${String(\n        parentFingerprint,\n      )}\".`,\n    );\n  }\n}\n\n/**\n * Validate that the index is zero for the root node.\n *\n * @param index - The index to validate.\n * @param depth - The depth of the node to validate.\n * @throws If the index is not zero for the root node.\n */\nexport function validateRootIndex(index: number, depth: number): void {\n  if (depth === 0 && index !== 0) {\n    throw new Error(\n      `Invalid index: The index of the root node must be 0. Received: \"${String(\n        index,\n      )}\".`,\n    );\n  }\n}\n\ntype DeriveChildNodeArgs = {\n  path: SLIP10PathTuple;\n  node: SLIP10Node | BIP44Node | BIP44CoinTypeNode;\n};\n\n/**\n * Derives a child key from the given parent key.\n *\n * @param options - The options to use when deriving the child key.\n * @param options.node - The node to derive from.\n * @param options.path - The path to the child node / key.\n * @param cryptographicFunctions - The cryptographic functions to use. If\n * provided, these will be used instead of the built-in implementations.\n * @returns The derived key and depth.\n */\nexport async function deriveChildNode(\n  { path, node }: DeriveChildNodeArgs,\n  cryptographicFunctions?: CryptographicFunctions,\n): Promise<SLIP10Node> {\n  if (path.length === 0) {\n    throw new Error(\n      'Invalid HD tree derivation path: Deriving a path of length 0 is not defined.',\n    );\n  }\n\n  // Note that we do not subtract 1 from the length of the path to the child,\n  // unlike when we calculate the depth of a rooted path.\n  const newDepth = node.depth + path.length;\n  validateBIP32Depth(newDepth);\n\n  return await deriveKeyFromPath(\n    {\n      path,\n      node,\n      depth: newDepth,\n    },\n    cryptographicFunctions,\n  );\n}\n"]}