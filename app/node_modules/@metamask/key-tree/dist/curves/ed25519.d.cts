export declare const curve: Readonly<import("@noble/curves/abstract/curve").BasicCurve<bigint> & {
    a: bigint;
    d: bigint;
    hash: import("@noble/curves/abstract/utils").FHash;
    randomBytes: (bytesLength?: number | undefined) => Uint8Array;
    adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array;
    domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;
    uvRatio?: (u: bigint, v: bigint) => {
        isValid: boolean;
        value: bigint;
    };
    prehash?: import("@noble/curves/abstract/utils").FHash;
    mapToCurve?: (scalar: bigint[]) => import("@noble/curves/abstract/curve").AffinePoint<bigint>;
} & {
    nByteLength: number;
    nBitLength: number;
}>;
export declare const name = "ed25519";
export declare const secret: Uint8Array;
export declare const isValidPrivateKey: (_privateKey: Uint8Array | string | bigint) => boolean;
export declare const deriveUnhardenedKeys = false;
export declare const publicKeyLength = 33;
export declare const getPublicKey: (privateKey: Uint8Array, _compressed?: boolean) => Uint8Array;
export declare const publicAdd: (_publicKey: Uint8Array, _tweak: Uint8Array) => Uint8Array;
export declare const compressPublicKey: (publicKey: Uint8Array) => Uint8Array;
export declare const decompressPublicKey: (publicKey: Uint8Array) => Uint8Array;
export declare const privateKeyLength = 32;
export declare const masterNodeGenerationSpec = "slip10";
export declare const compressedPublicKeyLength = 33;
//# sourceMappingURL=ed25519.d.cts.map