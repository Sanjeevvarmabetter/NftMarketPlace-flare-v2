export declare const curve: Readonly<import("@noble/curves/abstract/curve").BasicCurve<bigint> & {
    a: bigint;
    b: bigint;
    allowedPrivateKeyLengths?: readonly number[];
    wrapPrivateKey?: boolean;
    endo?: {
        beta: bigint;
        splitScalar: (k: bigint) => {
            k1neg: boolean;
            k1: bigint;
            k2neg: boolean;
            k2: bigint;
        };
    };
    isTorsionFree?: (c: import("@noble/curves/abstract/weierstrass").ProjConstructor<bigint>, point: import("@noble/curves/abstract/weierstrass").ProjPointType<bigint>) => boolean;
    clearCofactor?: (c: import("@noble/curves/abstract/weierstrass").ProjConstructor<bigint>, point: import("@noble/curves/abstract/weierstrass").ProjPointType<bigint>) => import("@noble/curves/abstract/weierstrass").ProjPointType<bigint>;
} & {
    hash: import("@noble/curves/abstract/utils").CHash;
    hmac: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;
    randomBytes: (bytesLength?: number | undefined) => Uint8Array;
    lowS?: boolean;
    bits2int?: (bytes: Uint8Array) => bigint;
    bits2int_modN?: (bytes: Uint8Array) => bigint;
} & {
    nByteLength: number;
    nBitLength: number;
}>;
export declare const name = "secp256k1";
export declare const secret: Uint8Array;
export declare const deriveUnhardenedKeys = true;
export declare const publicKeyLength = 65;
export declare const isValidPrivateKey: (privateKey: Uint8Array) => boolean;
export declare const getPublicKey: (privateKey: Uint8Array, compressed?: boolean) => Uint8Array;
export declare const publicAdd: (publicKey: Uint8Array, tweak: Uint8Array) => Uint8Array;
export declare const compressPublicKey: (publicKey: Uint8Array) => Uint8Array;
export declare const decompressPublicKey: (publicKey: Uint8Array) => Uint8Array;
export declare const privateKeyLength = 32;
export declare const masterNodeGenerationSpec = "slip10";
export declare const compressedPublicKeyLength = 33;
//# sourceMappingURL=secp256k1.d.cts.map