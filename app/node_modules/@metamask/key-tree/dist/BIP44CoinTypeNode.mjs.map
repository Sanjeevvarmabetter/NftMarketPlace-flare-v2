{"version":3,"file":"BIP44CoinTypeNode.mjs","sourceRoot":"","sources":["../src/BIP44CoinTypeNode.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BIP44NodeInterface, JsonBIP44Node } from './BIP44Node';\nimport { BIP44Node } from './BIP44Node';\nimport type {\n  BIP39Node,\n  BIP44Depth,\n  BIP44PurposeNodeToken,\n  CoinTypeHDPathString,\n  HardenedBIP32Node,\n  Network,\n} from './constants';\nimport { BIP_32_HARDENED_OFFSET } from './constants';\nimport type { CryptographicFunctions } from './cryptography';\nimport type { SupportedCurve } from './curves';\nimport { deriveChildNode } from './SLIP10Node';\nimport type { CoinTypeToAddressIndices } from './utils';\nimport {\n  getBIP44CoinType,\n  getBIP32NodeToken,\n  getBIP44ChangePathString,\n  getBIP44CoinTypePathString,\n  getBIP44CoinTypeToAddressPathTuple,\n  getHardenedBIP32NodeToken,\n  getUnhardenedBIP32NodeToken,\n  hexStringToBytes,\n  nullableHexStringToBytes,\n} from './utils';\n\nexport type CoinTypeHDPathTuple = [\n  BIP39Node,\n  typeof BIP44PurposeNodeToken,\n  HardenedBIP32Node,\n];\n\nexport type CoinTypeSeedPathTuple = [\n  Uint8Array,\n  typeof BIP44PurposeNodeToken,\n  HardenedBIP32Node,\n];\n\nexport const BIP_44_COIN_TYPE_DEPTH = 2;\n\nexport type JsonBIP44CoinTypeNode = JsonBIP44Node & {\n  readonly coin_type: number;\n  readonly path: CoinTypeHDPathString;\n};\n\nexport type BIP44CoinTypeNodeInterface = BIP44NodeInterface & {\n  readonly coin_type: number;\n  readonly path: CoinTypeHDPathString;\n};\n\nexport type BIP44CoinTypeSeedOptions = {\n  readonly derivationPath: CoinTypeSeedPathTuple;\n  readonly network?: Network | undefined;\n};\n\n/**\n * A wrapper object for BIP-44 `coin_type` keys. `coin_type` is the index\n * specifying the protocol for which deeper keys are intended. For the\n * authoritative list of coin types, please see\n * [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).\n *\n * Recall that a BIP-44 HD tree path consists of the following nodes:\n *\n * `m / 44' / coin_type' / account' / change / address_index`\n *\n * With the following depths:\n *\n * `0 / 1 / 2 / 3 / 4 / 5`\n *\n */\nexport class BIP44CoinTypeNode implements BIP44CoinTypeNodeInterface {\n  /**\n   * Constructs a BIP-44 `coin_type` node. `coin_type` is the index\n   * specifying the protocol for which deeper keys are intended. For the\n   * authoritative list of coin types, please see\n   * [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param json - The {@link JsonBIP44Node} for the key of this node.\n   * @param coin_type - The coin_type index of this node. Must be a non-negative\n   * integer.\n   * @param cryptographicFunctions - The cryptographic functions to use. If\n   * provided, these will be used instead of the built-in implementations.\n   * @returns A BIP44CoinType node.\n   */\n  static async fromJSON(\n    json: JsonBIP44Node,\n    coin_type: number,\n    cryptographicFunctions?: CryptographicFunctions,\n  ): Promise<BIP44CoinTypeNode> {\n    validateCoinType(coin_type);\n    validateCoinTypeNodeDepth(json.depth);\n\n    const node = await BIP44Node.fromExtendedKey(\n      {\n        depth: json.depth,\n        index: json.index,\n        network: json.network,\n        parentFingerprint: json.parentFingerprint,\n        chainCode: hexStringToBytes(json.chainCode),\n        privateKey: nullableHexStringToBytes(json.privateKey),\n        publicKey: hexStringToBytes(json.publicKey),\n      },\n      cryptographicFunctions,\n    );\n\n    return new BIP44CoinTypeNode(node, coin_type);\n  }\n\n  /**\n   * Construct a BIP-44 `coin_type` node. `coin_type` is the index\n   * specifying the protocol for which deeper keys are intended. For the\n   * authoritative list of coin types, please see\n   * [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param derivationPath - The derivation path for the key of this node.\n   * @param network - The network for the node. This is only used for extended\n   * keys, and defaults to `mainnet`.\n   * @param cryptographicFunctions - The cryptographic functions to use. If\n   * provided, these will be used instead of the built-in implementations.\n   * @returns A BIP44CoinType node.\n   */\n  static async fromDerivationPath(\n    derivationPath: CoinTypeHDPathTuple,\n    network?: Network | undefined,\n    cryptographicFunctions?: CryptographicFunctions,\n  ): Promise<BIP44CoinTypeNode> {\n    validateCoinTypeNodeDepth(derivationPath.length - 1);\n\n    const node = await BIP44Node.fromDerivationPath(\n      {\n        derivationPath,\n        network,\n      },\n      cryptographicFunctions,\n    );\n\n    const coinType = getBIP44CoinType(derivationPath);\n    return new BIP44CoinTypeNode(node, coinType);\n  }\n\n  /**\n   * Create a new BIP-44 coin type node from a BIP-39 seed. The derivation path\n   * must be rooted, i.e. it must begin with a BIP-39 node, given as a\n   * `Uint8Array` of the seed bytes.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * @param options - The options for the new node.\n   * @param options.derivationPath - The rooted HD tree path that will be used\n   * to derive the key of this node.\n   * @param options.network - The network for the node. This is only used for\n   * extended keys, and defaults to `mainnet`.\n   * @param cryptographicFunctions - The cryptographic functions to use. If\n   * provided, these will be used instead of the built-in implementations.\n   * @returns A new BIP-44 node.\n   */\n  static async fromSeed(\n    { derivationPath, network }: BIP44CoinTypeSeedOptions,\n    cryptographicFunctions?: CryptographicFunctions,\n  ): Promise<BIP44CoinTypeNode> {\n    validateCoinTypeNodeDepth(derivationPath.length - 1);\n\n    const node = await BIP44Node.fromSeed(\n      {\n        derivationPath,\n        network,\n      },\n      cryptographicFunctions,\n    );\n\n    const coinType = getBIP44CoinType(derivationPath);\n    return new BIP44CoinTypeNode(node, coinType);\n  }\n\n  /**\n   * Constructs a BIP-44 `coin_type` node. `coin_type` is the index\n   * specifying the protocol for which deeper keys are intended. For the\n   * authoritative list of coin types, please see\n   * [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param node - The {@link BIP44Node} for the key of this node.\n   * @param coin_type - The coin_type index of this node. Must be a non-negative\n   * integer.\n   * @returns A BIP44CoinType node.\n   */\n  static async fromNode(\n    node: BIP44Node,\n    coin_type: number,\n  ): Promise<BIP44CoinTypeNode> {\n    if (!(node instanceof BIP44Node)) {\n      throw new Error('Invalid node: Expected an instance of BIP44Node.');\n    }\n\n    validateCoinType(coin_type);\n    validateCoinTypeNodeDepth(node.depth);\n\n    // TODO: Make this function not async in a future version.\n    return Promise.resolve(new BIP44CoinTypeNode(node, coin_type));\n  }\n\n  readonly #node: BIP44Node;\n\n  public readonly path: CoinTypeHDPathString;\n\n  public readonly coin_type: number;\n\n  // Constructors cannot use hash names.\n  // eslint-disable-next-line no-restricted-syntax\n  private constructor(node: BIP44Node, coin_type: number) {\n    this.#node = node;\n    this.coin_type = coin_type;\n    this.path = getBIP44CoinTypePathString(coin_type);\n\n    Object.freeze(this);\n  }\n\n  public get depth(): BIP44Depth {\n    return this.#node.depth;\n  }\n\n  public get privateKeyBytes(): Uint8Array | undefined {\n    return this.#node.privateKeyBytes;\n  }\n\n  public get publicKeyBytes(): Uint8Array {\n    return this.#node.publicKeyBytes;\n  }\n\n  public get chainCodeBytes(): Uint8Array {\n    return this.#node.chainCodeBytes;\n  }\n\n  public get privateKey(): string | undefined {\n    return this.#node.privateKey;\n  }\n\n  public get publicKey(): string {\n    return this.#node.publicKey;\n  }\n\n  public get compressedPublicKey(): string {\n    return this.#node.compressedPublicKey;\n  }\n\n  public get compressedPublicKeyBytes(): Uint8Array {\n    return this.#node.compressedPublicKeyBytes;\n  }\n\n  public get chainCode(): string {\n    return this.#node.chainCode;\n  }\n\n  public get address(): string {\n    return this.#node.address;\n  }\n\n  public get masterFingerprint(): number | undefined {\n    return this.#node.masterFingerprint;\n  }\n\n  public get parentFingerprint(): number {\n    return this.#node.parentFingerprint;\n  }\n\n  public get fingerprint(): number {\n    return this.#node.fingerprint;\n  }\n\n  public get index(): number {\n    return this.#node.index;\n  }\n\n  public get network(): Network {\n    return this.#node.network;\n  }\n\n  public get curve(): SupportedCurve {\n    return this.#node.curve;\n  }\n\n  public get extendedKey(): string {\n    return this.#node.extendedKey;\n  }\n\n  /**\n   * Derives a BIP-44 `address_index` key corresponding to the path of this\n   * node and the specified `account`, `change`, and `address_index` values.\n   * `address_index` keys are normally the keys used to generate user account\n   * addresses.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param indices - The BIP-44 index values to use in key derivation.\n   * @param indices.account - The `account` index. Default: `0`\n   * @param indices.change - The `change` index. Default: `0`\n   * @param indices.address_index - The `address_index` index.\n   * @returns The derived BIP-44 `address_index` node.\n   */\n  async deriveBIP44AddressKey({\n    account = 0,\n    change = 0,\n    address_index,\n  }: CoinTypeToAddressIndices): Promise<BIP44Node> {\n    return await this.#node.derive(\n      getBIP44CoinTypeToAddressPathTuple({ account, change, address_index }),\n    );\n  }\n\n  toJSON(): JsonBIP44CoinTypeNode {\n    return {\n      ...this.#node.toJSON(),\n      coin_type: this.coin_type,\n      path: this.path,\n    };\n  }\n}\n\n/**\n * Validates the depth of a `coin_type` node. Simply, ensures that it is the\n * number `2`. An error is thrown if validation fails.\n *\n * @param depth - The depth to validate.\n */\nfunction validateCoinTypeNodeDepth(depth: number): void {\n  if (depth !== BIP_44_COIN_TYPE_DEPTH) {\n    throw new Error(\n      `Invalid depth: Coin type nodes must be of depth ${BIP_44_COIN_TYPE_DEPTH}. Received: \"${depth}\"`,\n    );\n  }\n}\n\n/**\n * Validates that the coin type is a non-negative integer number. An error is\n * thrown if validation fails.\n *\n * @param coin_type - The coin type to validate.\n */\nfunction validateCoinType(coin_type: unknown): asserts coin_type is number {\n  if (\n    typeof coin_type !== 'number' ||\n    !Number.isInteger(coin_type) ||\n    coin_type < 0\n  ) {\n    throw new Error(\n      'Invalid coin type: The specified coin type must be a non-negative integer number.',\n    );\n  }\n}\n\n/**\n * Derives a BIP-44 address key corresponding to the specified derivation path,\n * given either by a {@link BIP44CoinTypeNode} or derivation path tuple.\n *\n * Recall that a BIP-44 HD tree path consists of the following nodes:\n *\n * `m / 44' / coin_type' / account' / change / address_index`\n *\n * With the following depths:\n *\n * `0 / 1 / 2 / 3 / 4 / 5`\n *\n * @param parentKeyOrNode - The `coin_type` parent key to derive from.\n * @param indices - The BIP-44 index values to use in key derivation.\n * @param indices.account - The `account` index. Default: `0`.\n * @param indices.change - The `change` index. Default: `0`.\n * @param indices.address_index - The `address_index` index.\n * @param cryptographicFunctions - The cryptographic functions to use. If\n * provided, these will be used instead of the built-in implementations.\n * @returns The derived `address_index` key for the specified derivation path.\n */\nexport async function deriveBIP44AddressKey(\n  parentKeyOrNode: BIP44CoinTypeNode | JsonBIP44CoinTypeNode | string,\n  { account = 0, change = 0, address_index }: CoinTypeToAddressIndices,\n  cryptographicFunctions?: CryptographicFunctions,\n): Promise<BIP44Node> {\n  const path = getBIP44CoinTypeToAddressPathTuple({\n    account,\n    change,\n    address_index,\n  });\n\n  const node = await getNode(parentKeyOrNode, cryptographicFunctions);\n  const childNode = await deriveChildNode(\n    {\n      path,\n      node,\n    },\n    cryptographicFunctions,\n  );\n\n  return new BIP44Node(childNode);\n}\n\nexport type BIP44AddressKeyDeriver = {\n  /**\n   * @param address_index - The `address_index` value.\n   * @param isHardened - Whether the derived index is hardened.\n   * @returns The key corresponding to the path of this deriver and the\n   * specified `address_index` value.\n   */\n  (address_index: number, isHardened?: boolean): Promise<BIP44Node>;\n\n  /**\n   * A human-readable representation of the derivation path of this deriver\n   * function, excluding the `address_index`, which is parameterized.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   */\n  path: ReturnType<typeof getBIP44ChangePathString>;\n\n  /**\n   * The `coin_type` index of addresses derived by this deriver function.\n   */\n  coin_type: number;\n};\n\n/**\n * Creates a function that derives BIP-44 address keys corresponding to the\n * specified derivation path, given either by a {@link BIP44CoinTypeNode} or\n * derivation path tuple.\n *\n * Recall that a BIP-44 HD tree path consists of the following nodes:\n *\n * `m / 44' / coin_type' / account' / change / address_index`\n *\n * With the following depths:\n *\n * `0 / 1 / 2 / 3 / 4 / 5`\n *\n * @param node - The {@link BIP44CoinTypeNode} to derive address keys from.\n * This node contains a BIP-44 key of depth 2, `coin_type`.\n * @param accountAndChangeIndices - The `account` and `change` indices that\n * will be used to derive addresses.\n * @param cryptographicFunctions - The cryptographic functions to use. If\n * provided, these will be used instead of the built-in implementations.\n * @returns The deriver function for the derivation path specified by the\n * `coin_type` node, `account`, and `change` indices.\n */\nexport async function getBIP44AddressKeyDeriver(\n  node: BIP44CoinTypeNode | JsonBIP44CoinTypeNode | string,\n  accountAndChangeIndices?: Omit<CoinTypeToAddressIndices, 'address_index'>,\n  cryptographicFunctions?: CryptographicFunctions,\n): Promise<BIP44AddressKeyDeriver> {\n  const { account = 0, change = 0 } = accountAndChangeIndices ?? {};\n\n  const actualNode = await getNode(node, cryptographicFunctions);\n\n  const accountNode = getHardenedBIP32NodeToken(account);\n  const changeNode = getBIP32NodeToken(change);\n\n  const bip44AddressKeyDeriver: BIP44AddressKeyDeriver = async (\n    address_index: number,\n    isHardened = false,\n  ): Promise<BIP44Node> => {\n    const slip10Node = await deriveChildNode(\n      {\n        path: [\n          accountNode,\n          changeNode,\n          isHardened\n            ? getHardenedBIP32NodeToken(address_index)\n            : getUnhardenedBIP32NodeToken(address_index),\n        ],\n        node: actualNode,\n      },\n      cryptographicFunctions,\n    );\n\n    return new BIP44Node(slip10Node);\n  };\n\n  bip44AddressKeyDeriver.coin_type = actualNode.coin_type;\n  bip44AddressKeyDeriver.path = getBIP44ChangePathString(actualNode.path, {\n    account,\n    change,\n  });\n\n  Object.freeze(bip44AddressKeyDeriver);\n\n  return bip44AddressKeyDeriver;\n}\n\n/**\n * Get a BIP-44 coin type node from a JSON node or extended key string. If an existing coin type\n * node is provided, the same node is returned.\n *\n * The depth of the node is validated to be a valid coin type node.\n *\n * @param node - A BIP-44 coin type node, JSON node or extended key.\n * @param cryptographicFunctions - The cryptographic functions to use. If\n * provided, these will be used instead of the built-in implementations. This is\n * only used if the node is an extended key string or JSON object.\n * @returns A BIP44CoinType node.\n */\nasync function getNode(\n  node: BIP44CoinTypeNode | JsonBIP44CoinTypeNode | string,\n  cryptographicFunctions?: CryptographicFunctions,\n): Promise<BIP44CoinTypeNode> {\n  if (node instanceof BIP44CoinTypeNode) {\n    validateCoinTypeNodeDepth(node.depth);\n\n    return node;\n  }\n\n  if (typeof node === 'string') {\n    const bip44Node = await BIP44Node.fromExtendedKey(\n      node,\n      cryptographicFunctions,\n    );\n    const coinTypeNode = await BIP44CoinTypeNode.fromNode(\n      bip44Node,\n      bip44Node.index - BIP_32_HARDENED_OFFSET,\n    );\n\n    validateCoinTypeNodeDepth(coinTypeNode.depth);\n\n    return coinTypeNode;\n  }\n\n  return BIP44CoinTypeNode.fromJSON(\n    node,\n    node.coin_type,\n    cryptographicFunctions,\n  );\n}\n"]}