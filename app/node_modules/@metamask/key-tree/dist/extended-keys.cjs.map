{"version":3,"file":"extended-keys.cjs","sourceRoot":"","sources":["../src/extended-keys.ts"],"names":[],"mappings":";;;AAAA,2CAAmE;AAEnE,+CAAiD;AAEjD,sDAA4E;AAC5E,uCAAgF;AAEhF,wHAAwH;AACxH,MAAM,kBAAkB,GAAG,UAAU,CAAC;AACtC,MAAM,mBAAmB,GAAG,UAAU,CAAC;AAEvC,MAAM,0BAA0B,GAAG,UAAU,CAAC;AAC9C,MAAM,2BAA2B,GAAG,UAAU,CAAC;AAoC/C;;;;;GAKG;AACH,SAAS,iBAAiB,CAAC,OAAe;IACxC,QAAQ,OAAO,EAAE,CAAC;QAChB,KAAK,kBAAkB;YACrB,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;QAChD,KAAK,0BAA0B;YAC7B,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;QAChD,KAAK,mBAAmB;YACtB,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;QACjD,KAAK,2BAA2B;YAC9B,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;QACjD;YACE,MAAM,IAAI,KAAK,CACb,+EAA+E,CAChF,CAAC;IACN,CAAC;AACH,CAAC;AAED;;;;;;GAMG;AACH,SAAS,qBAAqB,CAC5B,OAAgB,EAChB,IAA0B;IAE1B,QAAQ,OAAO,EAAE,CAAC;QAChB,KAAK,SAAS;YACZ,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,mBAAmB,CAAC;QACtE,KAAK,SAAS;YACZ,OAAO,IAAI,KAAK,QAAQ;gBACtB,CAAC,CAAC,0BAA0B;gBAC5B,CAAC,CAAC,2BAA2B,CAAC;QAClC;YACE,OAAO,IAAA,wBAAgB,EAAC,OAAO,CAAC,CAAC;IACrC,CAAC;AACH,CAAC;AAED;;;;;;;;GAQG;AACI,MAAM,iBAAiB,GAAG,CAAC,WAAmB,EAAe,EAAE;IACpE,MAAM,KAAK,GAAG,IAAA,yBAAiB,EAAC,WAAW,CAAC,CAAC;IAE7C,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,EAAE,CAAC;QACxB,MAAM,IAAI,KAAK,CACb,sDAAsD,KAAK,CAAC,MAAM,GAAG,CACtE,CAAC;IACJ,CAAC;IAED,MAAM,IAAI,GAAG,IAAA,sBAAc,EAAC,KAAK,CAAC,CAAC;IAEnC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IACzC,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAErD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC/B,IAAA,8BAAkB,EAAC,KAAK,CAAC,CAAC;IAE1B,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IACnD,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IAEvC,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACtC,IAAI,CAAC,IAAA,uBAAe,EAAC,SAAS,EAAE,EAAE,CAAC,EAAE,CAAC;QACpC,MAAM,IAAI,KAAK,CACb,yEAAyE,CAC1E,CAAC;IACJ,CAAC;IAED,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAChC,IAAI,CAAC,IAAA,uBAAe,EAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;QAC9B,MAAM,IAAI,KAAK,CACb,kEAAkE,CACnE,CAAC;IACJ,CAAC;IAED,MAAM,OAAO,GAAG,IAAA,sBAAc,EAAC,GAAG,CAAC,CAAC;IAEpC,IAAI,IAAI,KAAK,QAAQ,EAAE,CAAC;QACtB,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;YACjE,MAAM,IAAI,KAAK,CACb,gEAAgE,CACjE,CAAC;QACJ,CAAC;QAED,OAAO;YACL,IAAI;YACJ,KAAK;YACL,iBAAiB;YACjB,KAAK;YACL,OAAO;YACP,SAAS;YACT,SAAS,EAAE,IAAA,+BAAmB,EAAC,GAAG,CAAC;SACpC,CAAC;IACJ,CAAC;IAED,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;QACjC,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC7E,CAAC;IAED,OAAO;QACL,IAAI;QACJ,KAAK;QACL,iBAAiB;QACjB,KAAK;QACL,OAAO;QACP,SAAS;QACT,UAAU,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;KACzB,CAAC;AACJ,CAAC,CAAC;AAnEW,QAAA,iBAAiB,qBAmE5B;AAEF;;;;;GAKG;AACI,MAAM,iBAAiB,GAAG,CAAC,WAAwB,EAAU,EAAE;IACpE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,iBAAiB,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,GACjE,WAAW,CAAC;IAEd,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;IAEjC,MAAM,IAAI,GAAG,IAAA,sBAAc,EAAC,KAAK,CAAC,CAAC;IACnC,MAAM,OAAO,GAAG,qBAAqB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAErD,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAClC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IACxB,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAC5C,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAEhC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAEzB,IAAI,IAAI,KAAK,QAAQ,EAAE,CAAC;QACtB,MAAM,EAAE,SAAS,EAAE,GAAG,WAAW,CAAC;QAClC,MAAM,mBAAmB,GAAG,IAAA,6BAAiB,EAAC,SAAS,CAAC,CAAC;QAEzD,KAAK,CAAC,GAAG,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;IACrC,CAAC;IAED,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;QACvB,MAAM,EAAE,UAAU,EAAE,GAAG,WAAW,CAAC;QACnC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IAC5B,CAAC;IAED,OAAO,IAAA,yBAAiB,EAAC,KAAK,CAAC,CAAC;AAClC,CAAC,CAAC;AA7BW,QAAA,iBAAiB,qBA6B5B","sourcesContent":["import { assertExhaustive, createDataView } from '@metamask/utils';\n\nimport { validateBIP44Depth } from './BIP44Node';\nimport type { Network } from './constants';\nimport { compressPublicKey, decompressPublicKey } from './curves/secp256k1';\nimport { decodeBase58check, encodeBase58check, isValidBytesKey } from './utils';\n\n// https://github.com/bitcoin/bips/blob/274fa400d630ba757bec0c03b35ebe2345197108/bip-0032.mediawiki#Serialization_format\nconst PUBLIC_KEY_VERSION = 0x0488b21e;\nconst PRIVATE_KEY_VERSION = 0x0488ade4;\n\nconst TESTNET_PUBLIC_KEY_VERSION = 0x043587cf;\nconst TESTNET_PRIVATE_KEY_VERSION = 0x04358394;\n\n/**\n * An extended public or private key. Contains either a public or private key,\n * depending on the version.\n */\ntype ExtendedKeyLike = {\n  depth: number;\n  parentFingerprint: number;\n  index: number;\n  network: Network;\n  chainCode: Uint8Array;\n};\n\ntype ExtendedPublicKey = ExtendedKeyLike & {\n  type: 'public';\n  publicKey: Uint8Array;\n};\n\ntype ExtendedPrivateKey = ExtendedKeyLike & {\n  type: 'private';\n  privateKey: Uint8Array;\n};\n\nexport type ExtendedKey = ExtendedPublicKey | ExtendedPrivateKey;\n\ntype VersionOptions =\n  | {\n      type: 'public';\n      network: Network;\n    }\n  | {\n      type: 'private';\n      network: Network;\n    };\n\n/**\n * Get the version options for a given version.\n *\n * @param version - The version to get the options for.\n * @returns The version options.\n */\nfunction getVersionOptions(version: number): VersionOptions {\n  switch (version) {\n    case PUBLIC_KEY_VERSION:\n      return { type: 'public', network: 'mainnet' };\n    case TESTNET_PUBLIC_KEY_VERSION:\n      return { type: 'public', network: 'testnet' };\n    case PRIVATE_KEY_VERSION:\n      return { type: 'private', network: 'mainnet' };\n    case TESTNET_PRIVATE_KEY_VERSION:\n      return { type: 'private', network: 'testnet' };\n    default:\n      throw new Error(\n        `Invalid extended key: Expected a public (xpub) or private key (xprv) version.`,\n      );\n  }\n}\n\n/**\n * Get the version for a given network and type.\n *\n * @param network - The network to get the version for.\n * @param type - The type to get the version for.\n * @returns The version.\n */\nfunction getVersionFromNetwork(\n  network: Network,\n  type: 'public' | 'private',\n): number {\n  switch (network) {\n    case 'mainnet':\n      return type === 'public' ? PUBLIC_KEY_VERSION : PRIVATE_KEY_VERSION;\n    case 'testnet':\n      return type === 'public'\n        ? TESTNET_PUBLIC_KEY_VERSION\n        : TESTNET_PRIVATE_KEY_VERSION;\n    default:\n      return assertExhaustive(network);\n  }\n}\n\n/**\n * Decode an extended public or private key. In the case of an extended public\n * key, the public key is returned in the uncompressed form.\n *\n * Throws an error if the extended key is invalid.\n *\n * @param extendedKey - The extended key string to attempt to decode.\n * @returns The decoded extended key.\n */\nexport const decodeExtendedKey = (extendedKey: string): ExtendedKey => {\n  const bytes = decodeBase58check(extendedKey);\n\n  if (bytes.length !== 78) {\n    throw new Error(\n      `Invalid extended key: Expected a length of 78, got ${bytes.length}.`,\n    );\n  }\n\n  const view = createDataView(bytes);\n\n  const version = view.getUint32(0, false);\n  const { network, type } = getVersionOptions(version);\n\n  const depth = view.getUint8(4);\n  validateBIP44Depth(depth);\n\n  const parentFingerprint = view.getUint32(5, false);\n  const index = view.getUint32(9, false);\n\n  const chainCode = bytes.slice(13, 45);\n  if (!isValidBytesKey(chainCode, 32)) {\n    throw new Error(\n      `Invalid extended key: Chain code must be a 32-byte non-zero byte array.`,\n    );\n  }\n\n  const key = bytes.slice(45, 78);\n  if (!isValidBytesKey(key, 33)) {\n    throw new Error(\n      `Invalid extended key: Key must be a 33-byte non-zero byte array.`,\n    );\n  }\n\n  const keyView = createDataView(key);\n\n  if (type === 'public') {\n    if (keyView.getUint8(0) !== 0x02 && keyView.getUint8(0) !== 0x03) {\n      throw new Error(\n        `Invalid extended key: Public key must start with 0x02 or 0x03.`,\n      );\n    }\n\n    return {\n      type,\n      depth,\n      parentFingerprint,\n      index,\n      network,\n      chainCode,\n      publicKey: decompressPublicKey(key),\n    };\n  }\n\n  if (keyView.getUint8(0) !== 0x00) {\n    throw new Error(`Invalid extended key: Private key must start with 0x00.`);\n  }\n\n  return {\n    type,\n    depth,\n    parentFingerprint,\n    index,\n    network,\n    chainCode,\n    privateKey: key.slice(1),\n  };\n};\n\n/**\n * Encodes an extended public or private key. Assumes that all the inputs are verified beforehand.\n *\n * @param extendedKey - The extended key data to encode.\n * @returns The encoded extended key.\n */\nexport const encodeExtendedKey = (extendedKey: ExtendedKey): string => {\n  const { type, depth, parentFingerprint, index, network, chainCode } =\n    extendedKey;\n\n  const bytes = new Uint8Array(78);\n\n  const view = createDataView(bytes);\n  const version = getVersionFromNetwork(network, type);\n\n  view.setUint32(0, version, false);\n  view.setUint8(4, depth);\n  view.setUint32(5, parentFingerprint, false);\n  view.setUint32(9, index, false);\n\n  bytes.set(chainCode, 13);\n\n  if (type === 'public') {\n    const { publicKey } = extendedKey;\n    const compressedPublicKey = compressPublicKey(publicKey);\n\n    bytes.set(compressedPublicKey, 45);\n  }\n\n  if (type === 'private') {\n    const { privateKey } = extendedKey;\n    bytes.set(privateKey, 46);\n  }\n\n  return encodeBase58check(bytes);\n};\n"]}